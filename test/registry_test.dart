/*
 * Copyright (c) TIKI Inc.
 * MIT license. See LICENSE file in root directory.
 */

import 'package:nock/nock.dart';
import 'package:test/test.dart';
import 'package:tiki_idp/registry/registry_model_req.dart';
import 'package:tiki_idp/registry/registry_model_rsp.dart';
import 'package:tiki_idp/registry/registry_repository.dart';
import 'package:uuid/uuid.dart';

import 'fixtures/registry_nock.dart';

void main() {
  setUpAll(() => nock.init());
  setUp(() => nock.cleanAll());

  group('Registry Repository Tests', () {
    test('Addresses - Success', () async {
      RegistryNock nock = RegistryNock();
      final Interceptor interceptor = nock.getInterceptor;

      RegistryRepository repository = RegistryRepository();
      RegistryModelRsp rsp = await repository.addresses(const Uuid().v4(),
          authorization: "dummy", signature: "dummy");

      expect(interceptor.isDone, true);
      expect(
          rsp.signKey?.q,
          BigInt.parse(
              "133496814700224266311178395817523623256192191668636619181731087211805632168600499815438230744263044071818731457394409861291836678998912729690702498703079368571801771168136827634457756050090889791765425650220016572664186776298929621222920373190823454611836937059815655649395623142258458769624344093848548130947"));
      expect(
          rsp.signKey?.p,
          BigInt.parse(
              "144106969844767740157142059500849659725324451374585817149077940313422655121678496776432467310286896647366409871661109446642393264535666188402549776276522719716039807983995712657900283415199781283192801571865334158391789032551706912244502471265381638111777423503969759081546090500941207934773401768279074686039"));
      expect(
          rsp.signKey?.exponent,
          BigInt.parse(
              "1577931690594712549450070413233163230101837766090483070459190434896814605708213612156671438784959172597742705120615796507747827820290643728007227093695131120063679812540613200806580754617288853527007182714186109465661325068515348826024861951914101111469430634482359303861639223101682716342322670693446598939854732049851467149593027192211573014029590066069465127473131039194440731312272633185961625755851646501775825055938058272496903485297381697312140277668275018501836732691691960130253477775883009379018601381144119519035310714761460777663660047536690496489594685086198471056462335734544799636104875146852735877675"));
      expect(
          rsp.signKey?.modulus,
          BigInt.parse(
              "19237821450377765110837924783194459791867573560835641147555383412116554518519057855066835844786507170409871391589581891122364318083599277835068299142311935301946495000367252784161637599358805616891353312908495034145855503862950500606676844524712946617500153565634895674296390989566548261729476489486821645376755991720758479604436550963358529662938217258798879781546433418872277344682598141063709051167981129778227508865287037307121201149177682684579297736340543375155086291349214856552505406779595347044215427243672581857279984424481155552301631482799072745674701120212969527395321231275952440167592835156014284748933"));
      expect(rsp.addresses?.length, 3);
      expect(rsp.addresses?.contains(RegistryNock.address1), true);
      expect(rsp.addresses?.contains(RegistryNock.address2), true);
      expect(rsp.addresses?.contains(RegistryNock.address3), true);
    });

    test('Register - Success', () async {
      RegistryNock nock = RegistryNock();
      final Interceptor interceptor = nock.postInterceptor;

      RegistryRepository repository = RegistryRepository();
      RegistryModelRsp rsp = await repository.register(
          RegistryModelReq(id: const Uuid().v4(), address: const Uuid().v4()),
          customerAuth: "dummy",
          authorization: "dummy",
          signature: "dummy");

      expect(interceptor.isDone, true);
      expect(
          rsp.signKey?.q,
          BigInt.parse(
              "133496814700224266311178395817523623256192191668636619181731087211805632168600499815438230744263044071818731457394409861291836678998912729690702498703079368571801771168136827634457756050090889791765425650220016572664186776298929621222920373190823454611836937059815655649395623142258458769624344093848548130947"));
      expect(
          rsp.signKey?.p,
          BigInt.parse(
              "144106969844767740157142059500849659725324451374585817149077940313422655121678496776432467310286896647366409871661109446642393264535666188402549776276522719716039807983995712657900283415199781283192801571865334158391789032551706912244502471265381638111777423503969759081546090500941207934773401768279074686039"));
      expect(
          rsp.signKey?.exponent,
          BigInt.parse(
              "1577931690594712549450070413233163230101837766090483070459190434896814605708213612156671438784959172597742705120615796507747827820290643728007227093695131120063679812540613200806580754617288853527007182714186109465661325068515348826024861951914101111469430634482359303861639223101682716342322670693446598939854732049851467149593027192211573014029590066069465127473131039194440731312272633185961625755851646501775825055938058272496903485297381697312140277668275018501836732691691960130253477775883009379018601381144119519035310714761460777663660047536690496489594685086198471056462335734544799636104875146852735877675"));
      expect(
          rsp.signKey?.modulus,
          BigInt.parse(
              "19237821450377765110837924783194459791867573560835641147555383412116554518519057855066835844786507170409871391589581891122364318083599277835068299142311935301946495000367252784161637599358805616891353312908495034145855503862950500606676844524712946617500153565634895674296390989566548261729476489486821645376755991720758479604436550963358529662938217258798879781546433418872277344682598141063709051167981129778227508865287037307121201149177682684579297736340543375155086291349214856552505406779595347044215427243672581857279984424481155552301631482799072745674701120212969527395321231275952440167592835156014284748933"));
      expect(rsp.addresses?.length, 1);
      expect(rsp.addresses?.contains(RegistryNock.address1), true);
    });
  });
}
